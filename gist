import pandas as pd
import re
import collections
import matplotlib.pyplot as plt

dic = collections.defaultdict(list)
with open('/home/pig/Рабочий стол/I_HATE_THIS_WORLD', 'r') as file:
    for i in file:
        if re.search(':', i):
            temp = re.sub(r'\W', '', i)
        elif re.search(r'\S',i):
            dic[temp] += [re.sub(r'  +', '', i[:-1])]
			
temp_dic = collections.defaultdict(list)
with open('/home/pig/Рабочий стол/chromodict', 'r') as file:
    for i in file:
        if not re.match('[=|\n]', i):
            a = re.sub('  .*', '', re.sub(r'  [^/]*/', '!@!', i))[:-1].split('!@!')
            temp_dic[a[0]] = a[1]
for key, value in dic.items():
    a = [temp_dic[i] for i in value]
    dic[key] = a
	
def animal_group(ids, dic = dic):
    for key, value in dic.items():
        for i in value:
            if i == ids:
                return key 

file_input = pd.read_table('/home/pig/Рабочий стол/test_inut') # сюда адресс файла аутпута
ag = file_input.groupby('name')
file_input.head()
totallen = 0
for i in file_input.index:
    totallen += file_input.loc[i]['stop'] - file_input.loc[i]['start']
# totallen


# нахождение суммарной длинны транспозонов +  по видам
summ = 0
transposons = collections.defaultdict(int)
for i in file_input['intersect'].map(lambda x:re.sub(r'[\[\]\',]', '', re.sub(r'\], \[', '|', x)).split('|')):
    for j in i:
        transposons[j.split(' ')[2]] = int(transposons[j.split(' ')[2]]) + int(j.split(' ')[1]) - int(j.split(' ')[0])
for i in transposons.values():summ += i
print(summ)
# transposons

# нахождение суммарного количества выравниваний для каждого возраста
total_len = {}
temp = []
for i in ag:
    for j in i:
        if type(j) == str:
            temp = [j]
        else:
            temp.append(j.shape[0])
            total_len[animal_group(re.search(r'[^\.]+', temp[0]).group())] = temp[1]
            string = []
total_len

summary = dic.copy()
for i in summary.keys():
    summary[i] = {'repeats': 0, 'other_repeats': 0, 'nothing': 0}
summary

nandict = {'repeats': 0, 'other_repeats': 0, 'nothing': 0}
for j in file_input.index:
    sim_tr, tr = 0, 0
    lenght = file_input.loc[j]['stop'] - file_input.loc[j]['start']
    for i in re.sub(r'[\[\]\',]', '', re.sub(r'\], \[', '|', file_input.loc[j]['intersect'])).split('|'):
        if i.split(' ')[2] != 'Xex-Lech':
            tr += int(i.split(' ')[1]) - int(i.split(' ')[0])
        else:
            sim_tr += int(i.split(' ')[1]) - int(i.split(' ')[0])
#     print(file_input['name'][j])
    if str(file_input['name'][j]) == 'nan' or str(file_input['name'][j]) == 'NaN':
        nandict['repeats'] += tr
        nandict['other_repeats'] += sim_tr
        nandict['nothing'] += lenght - tr - sim_tr
    else:
        ids = re.match(r'[^\.]+', file_input['name'][j]).group()
        for key, value in dic.items():
            if ids in value:
                ids = key
        summary[ids]['repeats'] += tr
        summary[ids]['other_repeats'] += sim_tr
        summary[ids]['nothing'] += lenght - tr - sim_tr
    print(file_input['name'][j], lenght, lenght - tr - sim_tr, tr,  sim_tr)
# for i in summary

for i in summary:
    if i == 'Human':
        dfs = pd.DataFrame({i : summary[i]}).transpose()
    else:
        dfs = dfs.append(pd.DataFrame({i : summary[i]}).transpose())
 

finaldf = pd.DataFrame(summary).transpose()
finaldf = finaldf.apply(lambda x: round(x/totallen,4))
finaldf

fig, ax = plt.subplots()
fig.set_size_inches(6,6)

finaldf.plot.bar(stacked=True, ax=ax);

ax.set_title("My ax title")
ax.legend(loc='upper left')
plt.show()


